{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport React, { useState } from 'react';\nimport * as firebase from 'firebase';\nimport firestore from 'firestore';\nvar firebaseConfig = {\n  apiKey: \"AIzaSyC-68UPtqGgmasYZf1rgl0fcm_fOnnxsnE\",\n  authDomain: \"mobileorderingapp-cfe7f.firebaseapp.com\",\n  projectId: 'mobileorderingapp-cfe7f',\n  databaseURL: \"https://mobileorderingapp-cfe7f.firebaseio.com\",\n  storageBucket: \"mobileorderingapp-cfe7f.appspot.com\"\n};\nvar firebaseApp = firebase.initializeApp(firebaseConfig);\n\nvar FirebaseController = function () {\n  function FirebaseController() {\n    _classCallCheck(this, FirebaseController);\n  }\n\n  _createClass(FirebaseController, [{\n    key: \"signUp\",\n    value: function signUp(firstName, lastName, phoneNumber, email, password) {\n      var uid;\n      firebase.auth().createUserWithEmailAndPassword(email, password).then(function (cred) {\n        console.log('User account created & signed in!');\n        uid = cred.user.uid;\n      }).then(function () {\n        firebase.firestore().collection('Users').doc(uid).set({\n          firstName: firstName,\n          lastName: lastName,\n          phoneNumber: phoneNumber,\n          email: email,\n          password: password\n        }).then(function () {\n          console.log('User added!');\n          user = firebase.auth().currentUser;\n        });\n      }).catch(function (error) {\n        if (error.code === 'auth/email-already-in-use') {\n          console.log('That email address is already in use!');\n        }\n\n        if (error.code === 'auth/invalid-email') {\n          console.log('That email address is invalid!');\n        }\n\n        console.error(error);\n      });\n    }\n  }, {\n    key: \"signIn\",\n    value: function signIn(email, password) {\n      firebase.auth().signInWithEmailAndPassword(email, password).then(function (cred) {\n        return firestore().collection('Users').doc(cred.user.uid);\n      }).catch(function (error) {\n        console.log(error);\n        return false;\n      });\n    }\n  }, {\n    key: \"setFirstName\",\n    value: function setFirstName(firstName) {\n      userDocument = firestore().collection('Users').doc(uid).set({\n        firstName: firstName\n      });\n    }\n  }, {\n    key: \"setLastName\",\n    value: function setLastName(lastName) {\n      userDocument = firestore.collection('Users').doc(uid).set({\n        lastName: lastName\n      });\n    }\n  }, {\n    key: \"setPhoneNumber\",\n    value: function setPhoneNumber(phoneNumber) {\n      userDocument = firestore.collection('Users').doc(uid).set({\n        phoneNumber: phoneNumber\n      });\n    }\n  }, {\n    key: \"setEmail\",\n    value: function setEmail(email) {\n      userDocument = firestore.collection('Users').doc(uid).set({\n        email: email\n      });\n    }\n  }, {\n    key: \"setPassword\",\n    value: function setPassword(password) {\n      userDocument = firestore.collection('Users').doc(uid).set({\n        password: password\n      });\n    }\n  }]);\n\n  return FirebaseController;\n}();\n\nexport { FirebaseController as default };","map":{"version":3,"sources":["/Users/recogunnels/Projects/mobileorderingapp-reactnative/controller/user-management/Firebase_Helper.js"],"names":["React","useState","firebase","firestore","firebaseConfig","apiKey","authDomain","projectId","databaseURL","storageBucket","firebaseApp","initializeApp","FirebaseController","firstName","lastName","phoneNumber","email","password","uid","auth","createUserWithEmailAndPassword","then","cred","console","log","user","collection","doc","set","currentUser","catch","error","code","signInWithEmailAndPassword","userDocument"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport * as firebase from 'firebase';\nimport firestore from 'firestore';\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyC-68UPtqGgmasYZf1rgl0fcm_fOnnxsnE\",\n    authDomain: \"mobileorderingapp-cfe7f.firebaseapp.com\",\n    projectId: 'mobileorderingapp-cfe7f',\n    databaseURL: \"https://mobileorderingapp-cfe7f.firebaseio.com\",\n    storageBucket: \"mobileorderingapp-cfe7f.appspot.com\",\n  };\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\n\nexport default class FirebaseController {\n  constructor() {\n  \n  }\n  signUp(firstName,lastName,phoneNumber,email,password){\n    var uid;\n    firebase.auth()\n    .createUserWithEmailAndPassword(email, password)\n    .then(cred => {\n      console.log('User account created & signed in!');\n      uid = cred.user.uid\n    })\n    .then(() => {\n    firebase.firestore()\n    .collection('Users')\n    .doc(uid)\n    .set({\n      firstName: firstName,\n      lastName: lastName,\n      phoneNumber: phoneNumber,\n      email: email,\n      password: password\n    })\n    .then(() => {\n      console.log('User added!');\n      user = firebase.auth().currentUser\n    });\n  \n    })\n    .catch(error => {\n      if (error.code === 'auth/email-already-in-use') {\n        console.log('That email address is already in use!');\n      }\n  \n      if (error.code === 'auth/invalid-email') {\n        console.log('That email address is invalid!');\n      }\n  \n      console.error(error);\n    });\n  }\n  signIn(email,password){\n    \n    firebase.auth().signInWithEmailAndPassword(email, password).then(cred => {\n      return firestore()\n      .collection('Users')\n      .doc(cred.user.uid)\n    })\n    .catch(function(error) {\n      // Handle Errors here\n      console.log(error);\n      return false\n  \n    })           \n  }\n  setFirstName (firstName) {\n      userDocument = firestore().collection('Users').doc(uid).set({\n        firstName: firstName\n      })\n    }\n  setLastName (lastName) {\n      userDocument = firestore.collection('Users').doc(uid).set({\n        lastName: lastName\n      })\n    }\n    setPhoneNumber (phoneNumber) {\n      userDocument = firestore.collection('Users').doc(uid).set({\n        phoneNumber: phoneNumber\n      })\n    }\n    setEmail (email) {\n      userDocument = firestore.collection('Users').doc(uid).set({\n        email: email\n      })\n    }\n    setPassword(password) {\n      userDocument = firestore.collection('Users').doc(uid).set({\n        password: password\n      })\n    }\n    \n\n}\n"]},"metadata":{},"sourceType":"module"}