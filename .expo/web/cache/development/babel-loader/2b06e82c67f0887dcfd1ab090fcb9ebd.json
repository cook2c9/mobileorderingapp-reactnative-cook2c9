{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport * as firebase from 'firebase';\nimport firestore from 'firestore';\nimport { firebaseConfig } from \"./config\";\n\nvar FirebaseAPI = function () {\n  function FirebaseAPI() {\n    _classCallCheck(this, FirebaseAPI);\n\n    firebase.initializeApp(firebaseConfig);\n    firebase.auth().onAuthStateChanged(function (user) {\n      if (user) {\n        isSignedIn = true;\n      } else {\n        isSignedIn = false;\n      }\n    });\n  }\n\n  _createClass(FirebaseAPI, [{\n    key: \"getUser\",\n    value: function getUser() {\n      return firebase.auth().currentUser;\n    }\n  }, {\n    key: \"signOut\",\n    value: function signOut() {\n      firebase.auth().signOut();\n    }\n  }, {\n    key: \"signUp\",\n    value: function signUp(firstName, lastName, phoneNumber, email, password) {\n      var uid;\n      firebase.auth().createUserWithEmailAndPassword(email, password).then(function (cred) {\n        console.log('User account created & signed in!');\n        uid = cred.user.uid;\n      }).then(function () {\n        firebase.firestore().collection('Users').doc(uid).set({\n          firstName: firstName,\n          lastName: lastName,\n          phoneNumber: phoneNumber,\n          email: email,\n          password: password\n        }).then(function () {\n          console.log('User added!');\n          user = firebase.auth().currentUser;\n        });\n      }).catch(function (error) {\n        if (error.code === 'auth/email-already-in-use') {\n          console.log('That email address is already in use!');\n        }\n\n        if (error.code === 'auth/invalid-email') {\n          console.log('That email address is invalid!');\n        }\n      });\n    }\n  }, {\n    key: \"signIn\",\n    value: function signIn(email, password) {\n      firebase.auth().signInWithEmailAndPassword(email, password).then(function (cred) {\n        return true;\n      }).catch(function (error) {\n        return false;\n      });\n    }\n  }, {\n    key: \"updateUserDocumentAndStore\",\n    value: function updateUserDocumentAndStore() {\n      var _this = this;\n\n      var userDocument = firebaseController.firestore().collection('Users').doc(user.uid).onSnapshot(function (doc) {\n        _this.firstName = doc.data().firstName;\n        _this.lastName = doc.data().lastName;\n        _this.phoneNumber = doc.data().phoneNumber;\n        _this.email = doc.data().email;\n      });\n    }\n  }]);\n\n  return FirebaseAPI;\n}();\n\nvar firebaseApp = new FirebaseAPI();\nexport { firebaseApp };","map":{"version":3,"sources":["C:/Users/tjhar/Documents/GitHub/mobileorderingapp-reactnative/src/api/firebase.js"],"names":["firebase","firestore","firebaseConfig","FirebaseAPI","initializeApp","auth","onAuthStateChanged","user","isSignedIn","currentUser","signOut","firstName","lastName","phoneNumber","email","password","uid","createUserWithEmailAndPassword","then","cred","console","log","collection","doc","set","catch","error","code","signInWithEmailAndPassword","userDocument","firebaseController","onSnapshot","data","firebaseApp"],"mappings":"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","sourcesContent":["import * as firebase from 'firebase';\r\nimport firestore from 'firestore';\r\nimport {firebaseConfig} from './config';\r\n\r\nclass FirebaseAPI {\r\n\r\n\r\n  constructor() {\r\n    firebase.initializeApp(firebaseConfig);\r\n    // this.user = firebase.auth().currentUser;\r\n    firebase.auth().onAuthStateChanged(function(user) {\r\n    if (user) {\r\n      // User is signed in.\r\n      isSignedIn = true;\r\n    } else {\r\n      // No user is signed in.\r\n      isSignedIn = false;\r\n    }\r\n  });\r\n  }\r\n  \r\n  getUser() {\r\n    return firebase.auth().currentUser;\r\n  }\r\n  signOut(){\r\n    firebase.auth().signOut();\r\n  }\r\n  signUp(firstName,lastName,phoneNumber,email,password){\r\n    var uid;\r\n    firebase.auth()\r\n    .createUserWithEmailAndPassword(email, password)\r\n    .then(cred => {\r\n      console.log('User account created & signed in!');\r\n      uid = cred.user.uid\r\n    })\r\n    .then(() => {\r\n    firebase.firestore()\r\n    .collection('Users')\r\n    .doc(uid)\r\n    .set({\r\n      firstName: firstName,\r\n      lastName: lastName,\r\n      phoneNumber: phoneNumber,\r\n      email: email,\r\n      password: password\r\n    })\r\n    .then(() => {\r\n      console.log('User added!');\r\n      user = firebase.auth().currentUser\r\n    });\r\n  \r\n    })\r\n    .catch(error => {\r\n      if (error.code === 'auth/email-already-in-use') {\r\n        console.log('That email address is already in use!');\r\n      }\r\n  \r\n      if (error.code === 'auth/invalid-email') {\r\n        console.log('That email address is invalid!');\r\n      }\r\n    });\r\n  }\r\n\r\n  signIn(email,password){\r\n    firebase.auth().signInWithEmailAndPassword(email, password).then(cred => {\r\n      return true;\r\n    })\r\n    .catch(function(error) {\r\n      return false;\r\n    })           \r\n  }\r\n\r\n  updateUserDocumentAndStore() {\r\n  \r\n    const userDocument = firebaseController.firestore()\r\n        .collection('Users').doc(user.uid)\r\n        .onSnapshot(doc => {\r\n            this.firstName = doc.data().firstName;\r\n            this.lastName = doc.data().lastName;\r\n            this.phoneNumber = doc.data().phoneNumber;\r\n            this.email = doc.data().email;\r\n        })\r\n    }\r\n\r\n}\r\n  \r\nconst firebaseApp = new FirebaseAPI();\r\n\r\nexport {firebaseApp};"]},"metadata":{},"sourceType":"module"}