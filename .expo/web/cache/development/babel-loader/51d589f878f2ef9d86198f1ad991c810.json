{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport React, { useState } from 'react';\nimport * as firebase from 'firebase';\nimport firestore from 'firestore';\nvar firebaseConfig = {\n  apiKey: \"AIzaSyC-68UPtqGgmasYZf1rgl0fcm_fOnnxsnE\",\n  authDomain: \"mobileorderingapp-cfe7f.firebaseapp.com\",\n  projectId: 'mobileorderingapp-cfe7f',\n  databaseURL: \"https://mobileorderingapp-cfe7f.firebaseio.com\",\n  storageBucket: \"mobileorderingapp-cfe7f.appspot.com\"\n};\nvar firebaseApp = firebase.initializeApp(firebaseConfig);\n\nvar FirebaseController = function () {\n  function FirebaseController() {\n    _classCallCheck(this, FirebaseController);\n  }\n\n  _createClass(FirebaseController, [{\n    key: \"setSucessTrue\",\n    value: function setSucessTrue() {\n      sucess = true;\n    }\n  }, {\n    key: \"setSucessFalse\",\n    value: function setSucessFalse() {\n      sucess = false;\n    }\n  }, {\n    key: \"firestore\",\n    value: function firestore() {\n      return firebase.firestore();\n    }\n  }, {\n    key: \"getUserId\",\n    value: function getUserId() {\n      return firebase.auth().currentUser.uid;\n    }\n  }, {\n    key: \"addUserTest\",\n    value: function addUserTest() {\n      firestoreDb.collection('Users').add({\n        name: 'Ada Lovelace',\n        age: 30\n      }).then(function () {\n        console.log('User added!');\n      });\n    }\n  }, {\n    key: \"signOut\",\n    value: function signOut() {\n      firebase.auth().signOut().then(function () {\n        return sucessful = false;\n      }).then(function () {\n        return console.log('User signed out!' + sucessful);\n      });\n    }\n  }, {\n    key: \"signUp\",\n    value: function signUp(firstName, lastName, phoneNumber, email, password) {\n      firebase.auth().createUserWithEmailAndPassword(email, password).then(function (cred) {\n        console.log('User account created & signed in!');\n        userDocument = db.collection('Users').doc(cred.user.uid);\n        console.log(cred.user.uid);\n        uid = cred.user.uid;\n      }).then(function () {\n        db.collection('Users').doc(uid).set({\n          firstName: firstName,\n          lastName: lastName,\n          phoneNumber: phoneNumber,\n          email: email,\n          password: password\n        }).then(function () {\n          console.log('User added!');\n          user = firebase.auth().currentUser;\n        });\n      }).catch(function (error) {\n        if (error.code === 'auth/email-already-in-use') {\n          console.log('That email address is already in use!');\n        }\n\n        if (error.code === 'auth/invalid-email') {\n          console.log('That email address is invalid!');\n        }\n\n        console.error(error);\n      });\n    }\n  }, {\n    key: \"signIn\",\n    value: function signIn(email, password) {\n      firebase.auth().signInWithEmailAndPassword(email, password).then(function (cred) {\n        userDocument = firestore().collection('Users').doc(cred.user.uid).then(function () {\n          return true;\n        });\n      }).catch(function (error) {\n        return false;\n      });\n    }\n  }, {\n    key: \"setFirstName\",\n    value: function setFirstName(firstName) {\n      userDocument = firestore().collection('Users').doc(uid).set({\n        firstName: firstName\n      });\n    }\n  }, {\n    key: \"setLastName\",\n    value: function setLastName(lastName) {\n      userDocument = firestore.collection('Users').doc(uid).set({\n        lastName: lastName\n      });\n    }\n  }, {\n    key: \"setPhoneNumber\",\n    value: function setPhoneNumber(phoneNumber) {\n      userDocument = firestore.collection('Users').doc(uid).set({\n        phoneNumber: phoneNumber\n      });\n    }\n  }, {\n    key: \"setEmail\",\n    value: function setEmail(email) {\n      userDocument = firestore.collection('Users').doc(uid).set({\n        email: email\n      });\n    }\n  }, {\n    key: \"setPassword\",\n    value: function setPassword(password) {\n      userDocument = firestore.collection('Users').doc(uid).set({\n        password: password\n      });\n    }\n  }]);\n\n  return FirebaseController;\n}();\n\nexport { FirebaseController as default };","map":{"version":3,"sources":["/Users/recogunnels/Documents/mobileorderingapp-reactnative/controller/user-management/Firebase_Helper.js"],"names":["React","useState","firebase","firestore","firebaseConfig","apiKey","authDomain","projectId","databaseURL","storageBucket","firebaseApp","initializeApp","FirebaseController","sucess","auth","currentUser","uid","firestoreDb","collection","add","name","age","then","console","log","signOut","sucessful","firstName","lastName","phoneNumber","email","password","createUserWithEmailAndPassword","cred","userDocument","db","doc","user","set","catch","error","code","signInWithEmailAndPassword"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport * as firebase from 'firebase';\nimport firestore from 'firestore';\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyC-68UPtqGgmasYZf1rgl0fcm_fOnnxsnE\",\n    authDomain: \"mobileorderingapp-cfe7f.firebaseapp.com\",\n    projectId: 'mobileorderingapp-cfe7f',\n    databaseURL: \"https://mobileorderingapp-cfe7f.firebaseio.com\",\n    storageBucket: \"mobileorderingapp-cfe7f.appspot.com\",\n  };\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\n\nexport default class FirebaseController {\n  constructor() {\n  \n  }\n  setSucessTrue(){\n    sucess = true;\n  }\n  setSucessFalse() {\n    sucess = false;\n  }\n  firestore() {\n    return firebase.firestore()\n  }\n  getUserId() {\n    return firebase.auth().currentUser.uid;\n  }\n  addUserTest() {\n    firestoreDb\n    .collection('Users')\n    .add({\n      name: 'Ada Lovelace',\n      age: 30,\n    })\n    .then(() => {\n      console.log('User added!');\n    });\n  }\n  signOut() {\n    firebase.auth()\n    .signOut()\n    .then(() => sucessful = false)\n    .then(() => console.log('User signed out!' + sucessful));\n  }\n  signUp(firstName,lastName,phoneNumber,email,password){\n    firebase.auth()\n    .createUserWithEmailAndPassword(email, password)\n    .then(cred => {\n      console.log('User account created & signed in!');\n      userDocument = db.collection('Users').doc(cred.user.uid);\n      console.log(cred.user.uid)\n      uid = cred.user.uid\n    })\n    .then(() => {\n    db\n    .collection('Users')\n    .doc(uid)\n    .set({\n      firstName: firstName,\n      lastName: lastName,\n      phoneNumber: phoneNumber,\n      email: email,\n      password: password\n    })\n    .then(() => {\n      console.log('User added!');\n      user = firebase.auth().currentUser\n    });\n  \n    })\n    .catch(error => {\n      if (error.code === 'auth/email-already-in-use') {\n        console.log('That email address is already in use!');\n      }\n  \n      if (error.code === 'auth/invalid-email') {\n        console.log('That email address is invalid!');\n      }\n  \n      console.error(error);\n    });\n  }\n  signIn(email,password){\n    \n    firebase.auth().signInWithEmailAndPassword(email, password).then(cred => {\n      userDocument = firestore()\n      .collection('Users')\n      .doc(cred.user.uid)\n      .then(() => { return true})\n    })\n    .catch(function(error) {\n      // Handle Errors here\n      \n      return false\n  \n    });            \n  };\n  setFirstName (firstName) {\n      userDocument = firestore().collection('Users').doc(uid).set({\n        firstName: firstName\n      })\n    }\n  setLastName (lastName) {\n      userDocument = firestore.collection('Users').doc(uid).set({\n        lastName: lastName\n      })\n    }\n    setPhoneNumber (phoneNumber) {\n      userDocument = firestore.collection('Users').doc(uid).set({\n        phoneNumber: phoneNumber\n      })\n    }\n    setEmail (email) {\n      userDocument = firestore.collection('Users').doc(uid).set({\n        email: email\n      })\n    }\n    setPassword(password) {\n      userDocument = firestore.collection('Users').doc(uid).set({\n        password: password\n      })\n    }\n    \n\n}\n"]},"metadata":{},"sourceType":"module"}